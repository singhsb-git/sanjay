retryPolicy:
  backoffDelay: 1
  backoffMaxDelay: 30
  maxRetries: 3
  
  -----------------
  
  public class RetryPolicyConfig {

  private static final Integer DEFAULT_MAX_RETRIES = 3;
  private static final Integer DEFAULT_BACKOFF_DELAY = 1;
  private static final Integer DEFAULT_BACKOFF_MAXDELAY = 30;
  
  private Integer maxRetries = DEFAULT_MAX_RETRIES;
  private Integer backoffDelay = DEFAULT_BACKOFF_DELAY;
  private Integer backoffMaxDelay = DEFAULT_BACKOFF_MAXDELAY;
  
  public Integer getMaxRetries() {
    return maxRetries;
  }
  public void setMaxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
  }
  public Integer getBackoffDelay() {
    return backoffDelay;
  }
  public void setBackoffDelay(Integer backoffDelay) {
    this.backoffDelay = backoffDelay;
  }
  public Integer getBackoffMaxDelay() {
    return backoffMaxDelay;
  }
  public void setBackoffMaxDelay(Integer backoffMaxDelay) {
    this.backoffMaxDelay = backoffMaxDelay;
  }
  
  
}

  -----------------
   @Bean
  public RetryPolicy retryPolicy(AppConfiguration appConfiguration) {

    int delay = appConfiguration.getRetryPolicyConfig().getBackoffDelay();
    int maxDelay = appConfiguration.getRetryPolicyConfig().getBackoffMaxDelay();
    int maxRetries = appConfiguration.getRetryPolicyConfig().getMaxRetries();

    return new RetryPolicy()
        .retryOn(exception -> !(exception instanceof ClientErrorPropagatingException))
        .withBackoff(delay, maxDelay, TimeUnit.SECONDS)
        .withMaxRetries(maxRetries);
  }
  
  ---------------------

import com.gs.cft.digital.cftcustomerhub.application.documents.*;
import com.gs.cft.digital.cftcustomerhub.application.scan.data.DocumentScanRequest;
import com.gs.cft.digital.cftcustomerhub.artifact.api.model.DocArtifactDTO;
import com.gs.cft.digital.cftcustomerhub.artifact.api.model.DocArtifactMetaDTO;
import com.gs.cft.digital.cftcustomerhub.exception.InvalidStateException;
import com.gs.cft.digital.cftdomain.exception.ClientErrorPropagatingException;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;
import net.jodah.failsafe.Failsafe;
import net.jodah.failsafe.RetryPolicy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import javax.ws.rs.WebApplicationException;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class DocumentServiceAdapterImpl implements DocumentServiceAdapter {

  private static final Logger LOG = LoggerFactory.getLogger(DocumentServiceAdapterImpl.class);

  private static final String TIMEOUT_KEY = "execution.isolation.thread.timeoutInMilliseconds";

  private static final String DEFAULT_TIMEOUT_DOCS = "60000";

  private final DocumentApiGateway documentApiGateway;

  private final RetryPolicy retryPolicy;

  public DocumentServiceAdapterImpl(DocumentApiGateway documentApiGateway,
                                    RetryPolicy retryPolicy) {
    this.documentApiGateway = documentApiGateway;
    this.retryPolicy = retryPolicy;
  }

  @Override
  @HystrixCommand(groupKey = "doc-service", commandKey = "storeDocument",
      ignoreExceptions = ClientErrorPropagatingException.class,
      commandProperties = {@HystrixProperty(name = TIMEOUT_KEY, value = DEFAULT_TIMEOUT_DOCS)})
  public DocArtifactMetaDTO storeDocument(StoreDocumentCommand storeDocumentCommand) {

    UploadedDocument uploadedDocument = documentApiGateway
        .uploadDocument(new UploadDocumentRequest(storeDocumentCommand.getCustomerId(),
            storeDocumentCommand.getFile(), storeDocumentCommand.scannable()));

    if (!uploadedDocument.uploadedSuccessfully()) {
      String msg = String.format(
          "Document Gateway return successfully but failed to respond with an artifact id, %s",
          storeDocumentCommand.commandFailedMessage());

      throw new WebApplicationException(msg);
    }

    DocumentArtifactMeta documentMeta = uploadedDocument.getDocumentMeta();

    return convert(documentMeta);
  }

  @Override
  @HystrixCommand(groupKey = "doc-service", commandKey = "getDocument",
      ignoreExceptions = ClientErrorPropagatingException.class,
      commandProperties = {@HystrixProperty(name = TIMEOUT_KEY, value = DEFAULT_TIMEOUT_DOCS)})
  public DocArtifactDTO retrieveDocument(DocumentId documentId) {

    DocumentArtifactDTO artifact =
        Failsafe.with(retryPolicy)
            .onRetriesExceeded(ctx -> LOG
                .error("Failed to get document artifact for document {}. Max retries exceeded.",
                    documentId.getId()))
            .get(() -> documentApiGateway.getDocument(documentId));

    return convert(artifact);
  }
