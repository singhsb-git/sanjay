https://www.mkyong.com/spring-boot/spring-boot-spring-data-jpa-oracle-example/ --> *****
https://dzone.com/articles/spring-boot-jpa-hibernate-oracle

@Bean
    public ObjectMapper objectMapper() {
        ObjectMapper objectMapper = new ObjectMapper();
        configureObjectMapper(objectMapper);
        return objectMapper;
    }

    public static void configureObjectMapper(ObjectMapper objectMapper) {
        SimpleModule sm = new SimpleModule();
        sm.addSerializer(ZonedDateTime.class, new JacksonUtil.ZonedDateTimeSerializer());
        sm.addDeserializer(ZonedDateTime.class, new JacksonUtil.ZonedDateTimeDeserializer());
        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        objectMapper.registerModule(sm);
    }
    
    import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class JacksonUtil {

    private static final Logger LOG = LoggerFactory.getLogger(JacksonUtil.class);

    private JacksonUtil() {

    }

    public static class ZonedDateTimeSerializer extends JsonSerializer<ZonedDateTime> {

        @Override
        public void serialize(ZonedDateTime value, JsonGenerator gen, SerializerProvider serializers)
                throws IOException {
            gen.writeString(value.plusNanos(1000000).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME));
        }
    }

    public static class ZonedDateTimeDeserializer extends JsonDeserializer<ZonedDateTime> {

        @Override
        public ZonedDateTime deserialize(JsonParser p, DeserializationContext ctx) throws IOException {
            try {
                return ZonedDateTime.parse(p.getText(), DateTimeFormatter.ISO_OFFSET_DATE_TIME);
            } catch (DateTimeParseException e) {
                LOG.warn("Ignoring unknown date time format {} {}", p.getText(), e.getMessage());
                return ZonedDateTime.of(
                        LocalDateTime
                                .parse(getFormatted(p.getText()), DateTimeFormatter.ISO_LOCAL_DATE_TIME),
                        ZoneId.of("America/New_York"));
            }
        }
    }

    private static String getFormatted(String text) {
        int index = text != null ? text.indexOf(".") : -1;
        return index > 0 ? text.substring(0, index) : text;
    }
}

<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcore</artifactId>
			<version>4.4</version>
		</dependency>
	    <dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.6</version>
		</dependency>

